{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hluong/Desktop/experiment_source/nextjs-portfolio/pages/_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport App, { Container } from 'next/app';\nimport Head from 'next/head';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Transition from '../components/transition';\nimport Header from \"../components/layout/header\";\nimport Footer from \"../components/layout/footer\";\nimport { GlobalStyle } from \"../src/global-styles\";\nimport './../styles/global.css';\nimport { initGA, logPageView } from './../components/GoogleAnalytics';\n/*\n    given a DOM image element, searches it for <img > tags and check if all of them \n    has finished loading or not\n    @param: parent node Element\n    @return boolean\n*/\n\nfunction imagesLoaded(parentNode) {\n  const imgElements = [...parentNode.querySelectorAll('img')];\n  imgElements.forEach(imgElement => {\n    if (!imgElement.complete) return false;\n  });\n  return true;\n}\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      triggerTransition: true,\n      isNavOpened: false,\n      navPosition: \"fixed\",\n      overflowClassname: \"nav-opened\",\n      menuColor: \"action\",\n      pageTitle: \"Hien Luong\",\n      // footer\n      footerTheme: \"light\"\n    });\n\n    _defineProperty(this, \"setMenuColor\", color => this.setState({\n      menuColor: color\n    }));\n\n    _defineProperty(this, \"setPageTitle\", pageTitle => this.setState({\n      pageTitle: pageTitle\n    }));\n\n    _defineProperty(this, \"setFooterTheme\", footerTheme => {\n      this.setState({\n        footerTheme: footerTheme\n      });\n    });\n\n    _defineProperty(this, \"toggleNav\", () => {\n      let {\n        isNavOpened,\n        overflowClassname\n      } = this.state;\n      !isNavOpened ? document.body.classList.add(overflowClassname) : document.body.classList.remove(overflowClassname);\n      this.setState({\n        isNavOpened: !isNavOpened\n      });\n    });\n\n    _defineProperty(this, \"checkAllImagesLoadin\", void 0);\n\n    _defineProperty(this, \"handleImageChange\", value => {\n      this.setState({\n        triggerTransition: value\n      }, () => {\n        document.body.classList.remove(this.state.overflowClassname);\n      });\n    });\n  }\n\n  componentDidMount() {\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentNode.removeChild(jssStyles);\n    } // disable transition page when all images are loaded\n    // 1. Assign load / error event for all unfinished images\n    // 2. if all images are loaded, disable transition page\n\n\n    const imageElements = [...this.bodyElement.querySelectorAll('img')];\n    const allImagesLoaded = true;\n    imageElements.forEach(img => {\n      if (!img.complete) {\n        img.addEventListener('load error', () => this.handleImageChange(!imagesLoaded(this.bodyElement)));\n        allImagesLoaded = false;\n      }\n    });\n\n    if (allImagesLoaded) {\n      setTimeout(() => this.handleImageChange(false), 3000);\n    }\n\n    if (!window.GA_INITIALIZED) {\n      initGA();\n      window.GA_INITIALIZED = true;\n    }\n\n    logPageView();\n  }\n\n  componentWillUnmount() {\n    const imageElements = [...this.bodyElement.querySelectorAll('img')];\n    imageElements.forEach(img => {\n      img.removeEventListener('load error');\n    });\n  }\n\n  render() {\n    let {\n      Component,\n      pageProps\n    } = this.props;\n    let {\n      isNavOpened,\n      navPosition,\n      triggerTransition,\n      overflowClassname,\n      menuColor,\n      pageTitle,\n      footerTheme\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: [pageTitle, \" | Portfolio\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: element => this.bodyElement = element,\n        children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Transition, {\n          triggerTransition: triggerTransition,\n          overflowClassname: overflowClassname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread(_objectSpread({}, pageProps), {}, {\n          setMenuColor: this.setMenuColor,\n          setPageTitle: this.setPageTitle,\n          setFooterTheme: this.setFooterTheme,\n          handleImageChange: this.handleImageChange\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {\n          theme: footerTheme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/hluong/Desktop/experiment_source/nextjs-portfolio/pages/_app.js"],"names":["React","App","Container","Head","CssBaseline","Transition","Header","Footer","GlobalStyle","initGA","logPageView","imagesLoaded","parentNode","imgElements","querySelectorAll","forEach","imgElement","complete","MyApp","triggerTransition","isNavOpened","navPosition","overflowClassname","menuColor","pageTitle","footerTheme","color","setState","state","document","body","classList","add","remove","value","componentDidMount","jssStyles","querySelector","removeChild","imageElements","bodyElement","allImagesLoaded","img","addEventListener","handleImageChange","setTimeout","window","GA_INITIALIZED","componentWillUnmount","removeEventListener","render","Component","pageProps","props","element","setMenuColor","setPageTitle","setFooterTheme"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAO,wBAAP;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,iCAApC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAC9B,QAAMC,WAAW,GAAG,CAAC,GAAGD,UAAU,CAACE,gBAAX,CAA4B,KAA5B,CAAJ,CAApB;AACAD,EAAAA,WAAW,CAACE,OAAZ,CAAqBC,UAAD,IAAgB;AAChC,QAAI,CAACA,UAAU,CAACC,QAAhB,EAA0B,OAAO,KAAP;AAC7B,GAFD;AAIA,SAAO,IAAP;AACH;;AAED,MAAMC,KAAN,SAAoBjB,GAApB,CAAwB;AAAA;AAAA;;AAAA,mCAEZ;AACJkB,MAAAA,iBAAiB,EAAE,IADf;AAEJC,MAAAA,WAAW,EAAE,KAFT;AAGJC,MAAAA,WAAW,EAAE,OAHT;AAIJC,MAAAA,iBAAiB,EAAE,YAJf;AAKJC,MAAAA,SAAS,EAAE,QALP;AAMJC,MAAAA,SAAS,EAAE,YANP;AAQJ;AACAC,MAAAA,WAAW,EAAE;AATT,KAFY;;AAAA,0CAmDJC,KAAD,IAAW,KAAKC,QAAL,CAAc;AAAEJ,MAAAA,SAAS,EAAEG;AAAb,KAAd,CAnDN;;AAAA,0CAqDJF,SAAD,IAAe,KAAKG,QAAL,CAAc;AAAEH,MAAAA,SAAS,EAAEA;AAAb,KAAd,CArDV;;AAAA,4CAuDFC,WAAD,IAAiB;AAC9B,WAAKE,QAAL,CAAc;AAAEF,QAAAA,WAAW,EAAEA;AAAf,OAAd;AACH,KAzDmB;;AAAA,uCA2DR,MAAM;AACd,UAAI;AACAL,QAAAA,WADA;AAEAE,QAAAA;AAFA,UAGA,KAAKM,KAHT;AAKC,OAACR,WAAF,GACIS,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4BV,iBAA5B,CADJ,GAEIO,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,MAAxB,CAA+BX,iBAA/B,CAFJ;AAIA,WAAKK,QAAL,CAAc;AACVP,QAAAA,WAAW,EAAE,CAACA;AADJ,OAAd;AAGH,KAxEmB;;AAAA;;AAAA,+CA4ECc,KAAD,IAAW;AAC3B,WAAKP,QAAL,CAAc;AACVR,QAAAA,iBAAiB,EAAEe;AADT,OAAd,EAEG,MAAM;AACLL,QAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,MAAxB,CAA+B,KAAKL,KAAL,CAAWN,iBAA1C;AACH,OAJD;AAKH,KAlFmB;AAAA;;AAcpBa,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,SAAS,GAAGP,QAAQ,CAACQ,aAAT,CAAuB,kBAAvB,CAAlB;;AACA,QAAID,SAAJ,EAAe;AACXA,MAAAA,SAAS,CAACxB,UAAV,CAAqB0B,WAArB,CAAiCF,SAAjC;AACH,KAJe,CAMhB;AACA;AACA;;;AACA,UAAMG,aAAa,GAAG,CAAC,GAAG,KAAKC,WAAL,CAAiB1B,gBAAjB,CAAkC,KAAlC,CAAJ,CAAtB;AACA,UAAM2B,eAAe,GAAG,IAAxB;AACAF,IAAAA,aAAa,CAACxB,OAAd,CAAsB2B,GAAG,IAAI;AACzB,UAAI,CAACA,GAAG,CAACzB,QAAT,EAAmB;AACfyB,QAAAA,GAAG,CAACC,gBAAJ,CAAqB,YAArB,EAAmC,MAAM,KAAKC,iBAAL,CAAuB,CAACjC,YAAY,CAAC,KAAK6B,WAAN,CAApC,CAAzC;AACAC,QAAAA,eAAe,GAAG,KAAlB;AACH;AACJ,KALD;;AAOA,QAAIA,eAAJ,EAAqB;AACjBI,MAAAA,UAAU,CAAC,MAAM,KAAKD,iBAAL,CAAuB,KAAvB,CAAP,EAAsC,IAAtC,CAAV;AACH;;AAED,QAAI,CAACE,MAAM,CAACC,cAAZ,EAA4B;AACxBtC,MAAAA,MAAM;AACNqC,MAAAA,MAAM,CAACC,cAAP,GAAwB,IAAxB;AACH;;AACDrC,IAAAA,WAAW;AACd;;AAEDsC,EAAAA,oBAAoB,GAAG;AACnB,UAAMT,aAAa,GAAG,CAAC,GAAG,KAAKC,WAAL,CAAiB1B,gBAAjB,CAAkC,KAAlC,CAAJ,CAAtB;AAEAyB,IAAAA,aAAa,CAACxB,OAAd,CAAsB2B,GAAG,IAAI;AACzBA,MAAAA,GAAG,CAACO,mBAAJ,CAAwB,YAAxB;AACH,KAFD;AAGH;;AAmCDC,EAAAA,MAAM,GAAG;AACL,QAAI;AACAC,MAAAA,SADA;AAEAC,MAAAA;AAFA,QAGA,KAAKC,KAHT;AAKA,QAAI;AACAjC,MAAAA,WADA;AAEAC,MAAAA,WAFA;AAGAF,MAAAA,iBAHA;AAIAG,MAAAA,iBAJA;AAKAC,MAAAA,SALA;AAMAC,MAAAA,SANA;AAOAC,MAAAA;AAPA,QAQA,KAAKG,KART;AAUA,wBACI,QAAC,SAAD;AAAA,8BACI,QAAC,IAAD;AAAA,+BACI;AAAA,qBACKJ,SADL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,GAAG,EAAE8B,OAAO,IAAI,KAAKd,WAAL,GAAmBc,OAAxC;AAAA,gCACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAII,QAAC,UAAD;AAAY,UAAA,iBAAiB,EAAEnC,iBAA/B;AAAkD,UAAA,iBAAiB,EAAEG;AAArE;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAWI,QAAC,SAAD,kCACQ8B,SADR;AAEI,UAAA,YAAY,EAAE,KAAKG,YAFvB;AAGI,UAAA,YAAY,EAAE,KAAKC,YAHvB;AAII,UAAA,cAAc,EAAE,KAAKC,cAJzB;AAKI,UAAA,iBAAiB,EAAE,KAAKb;AAL5B;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAkBI,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAEnB;AAAf;AAAA;AAAA;AAAA;AAAA,gBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA6BH;;AAjImB;;AAoIxB,eAAeP,KAAf","sourcesContent":["import React from 'react';\nimport App, { Container } from 'next/app';\nimport Head from 'next/head';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Transition from '../components/transition';\nimport Header from \"../components/layout/header\";\nimport Footer from \"../components/layout/footer\";\nimport { GlobalStyle } from \"../src/global-styles\";\nimport './../styles/global.css';\nimport { initGA, logPageView } from './../components/GoogleAnalytics';\n/*\n    given a DOM image element, searches it for <img > tags and check if all of them \n    has finished loading or not\n    @param: parent node Element\n    @return boolean\n*/\nfunction imagesLoaded(parentNode) {\n    const imgElements = [...parentNode.querySelectorAll('img')];\n    imgElements.forEach((imgElement) => {\n        if (!imgElement.complete) return false;\n    });\n\n    return true;\n}\n\nclass MyApp extends App {\n\n    state = {\n        triggerTransition: true,\n        isNavOpened: false,\n        navPosition: \"fixed\",\n        overflowClassname: \"nav-opened\",\n        menuColor: \"action\",\n        pageTitle: \"Hien Luong\",\n\n        // footer\n        footerTheme: \"light\"\n    }\n\n    componentDidMount() {\n        const jssStyles = document.querySelector('#jss-server-side');\n        if (jssStyles) {\n            jssStyles.parentNode.removeChild(jssStyles)\n        }\n\n        // disable transition page when all images are loaded\n        // 1. Assign load / error event for all unfinished images\n        // 2. if all images are loaded, disable transition page\n        const imageElements = [...this.bodyElement.querySelectorAll('img')];\n        const allImagesLoaded = true;\n        imageElements.forEach(img => {\n            if (!img.complete) {\n                img.addEventListener('load error', () => this.handleImageChange(!imagesLoaded(this.bodyElement)))\n                allImagesLoaded = false;\n            }\n        })\n\n        if (allImagesLoaded) {\n            setTimeout(() => this.handleImageChange(false), 3000)\n        }\n\n        if (!window.GA_INITIALIZED) {\n            initGA();\n            window.GA_INITIALIZED = true;\n        }\n        logPageView();\n    }\n\n    componentWillUnmount() {\n        const imageElements = [...this.bodyElement.querySelectorAll('img')];\n\n        imageElements.forEach(img => {\n            img.removeEventListener('load error')\n        })\n    }\n\n    setMenuColor = (color) => this.setState({ menuColor: color });\n\n    setPageTitle = (pageTitle) => this.setState({ pageTitle: pageTitle });\n\n    setFooterTheme = (footerTheme) => {\n        this.setState({ footerTheme: footerTheme })\n    };\n\n    toggleNav = () => {\n        let {\n            isNavOpened,\n            overflowClassname\n        } = this.state;\n\n        (!isNavOpened) ?\n            document.body.classList.add(overflowClassname) :\n            document.body.classList.remove(overflowClassname)\n\n        this.setState({\n            isNavOpened: !isNavOpened,\n        })\n    }\n\n    checkAllImagesLoadin\n\n    handleImageChange = (value) => {\n        this.setState({\n            triggerTransition: value\n        }, () => {\n            document.body.classList.remove(this.state.overflowClassname)\n        });\n    }\n\n    render() {\n        let {\n            Component,\n            pageProps\n        } = this.props;\n\n        let {\n            isNavOpened,\n            navPosition,\n            triggerTransition,\n            overflowClassname,\n            menuColor,\n            pageTitle,\n            footerTheme\n        } = this.state;\n\n        return (\n            <Container>\n                <Head>\n                    <title>\n                        {pageTitle} | Portfolio\n                    </title>\n                </Head>\n                <div ref={element => this.bodyElement = element}>\n                    <GlobalStyle />\n                    <CssBaseline />\n\n                    <Transition triggerTransition={triggerTransition} overflowClassname={overflowClassname} />\n                    {/* <Header \n                        toggleNav={this.toggleNav} \n                        isNavOpened={isNavOpened} \n                        navPosition={navPosition}\n                        menuColor={menuColor}\n                    /> */}\n                    <Component\n                        {...pageProps}\n                        setMenuColor={this.setMenuColor}\n                        setPageTitle={this.setPageTitle}\n                        setFooterTheme={this.setFooterTheme}\n                        handleImageChange={this.handleImageChange}\n                    />\n                    <Footer theme={footerTheme} />\n                </div>\n            </Container>\n        )\n    }\n}\n\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}