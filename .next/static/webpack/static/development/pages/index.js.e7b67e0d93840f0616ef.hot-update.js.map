{"version":3,"file":"static/webpack/static/development/pages/index.js.e7b67e0d93840f0616ef.hot-update.js","sources":["webpack:///./components/Weather/index.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Axios from 'axios';\nimport { API } from './../../API';\nimport styled from 'styled-components';\nimport { breakPoints, colorOptions } from '../../src/theme';\nimport WIcon from './WIcon';\nimport {keyframe_flip} from './../../src/KeyFrames'\nconst ipLookup = async () => {\n    try {\n        const res = await Axios.get(API.IPLOOKUP_API_PATH);\n        const data = res.data;\n\n        return data;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nconst Wrapper = styled.div`\n    position: relative;\n    border-radius: 30px;\n    box-shadow: 15px 20px 85px #d7c4bd;\n    overflow: hidden;\n    background: linear-gradient(141deg,#f9ebe2 30%, #e7c3bb 75%);\n`;\n\nconst Card = styled.div`\n    z-index: 1;\n    background: #fff;\n    position: relative;\n    padding: 15px;\n`;\n\nconst CityText = styled.span`\n    left: 1em;\n    position: absolute;\n    font-size: 1.5em;\n    color: ${colorOptions.gray.PRIMARY_COLOR_BOLD};\n    font-weight: 600;\n`;\n\nconst TempText = styled.span`\n    color: ${colorOptions.gray.PRIMARY_COLOR_BOLD};\n    font-size: 4em;\n    font-weight: 700;\n    display: block;\n    position: relative;\n\n    @media screen and (min-width: ${breakPoints.md}px){\n        text-align: right;\n        margin-right: 10px;\n    }\n    small {\n        font-size: 70%;\n        animation: ${keyframe_flip} 4s linear infinite;\n        &.degree {\n            position: absolute;\n            top: -5px;\n        }\n    }\n`;\n\nconst TempSwitcher = styled.div`\n    position: absolute;\n    left: 15px;\n    bottom: 30px;\n    line-height: 30px;\n    vertical-align: middle;\n    width: 60px;\n    display: flex;\n    border-radius: 3px;\n    overflow: hidden;\n    z-index: 2;\n    span {\n        width: 50%;\n        text-align: center;\n        color: #fff;\n        font-weight: 700;\n        text-align: center;\n        text-shadow: 1px 1px 1px #191b1e;\n        background-color: #2d3035;\n        cursor: pointer;\n        &.active {\n            background-color: ${colorOptions.blue.PRIMARY_COLOR_BOLD};\n            cursor: default;\n        }\n    }\n`;\n\nconst WeatherText = styled.div`\n    position: absolute;\n    right: -2em;\n    top: -2em;\n    text-align: right;\n    img {\n        width: 80px;\n    }\n    p {\n        margin: 0;\n    }\n\n    @media screen and (max-width: ${breakPoints.md}px){\n        top: -3em;\n        right: -3em;\n    }\n`;\n\nconst Wave = styled.div`\n    height: 40px;\n    background-image: url(\"/static/images/sin.png\");\n    background-position: -115px 0px;\n    background-size: cover;\n    width: 100%;\n    position: relative;\n    top: 2px;\n    display: none;\n`;\n\nconst WType = {\n    200: \"thunder-storm\",\n    300: \"sun-shower\",\n    500: \"rainy\",\n    600: \"snow\",\n    700: \"mist\",\n    800: \"sunny\",\n    801: \"cloudy\"\n}\n\nconst getCurrentWeather = (query, units) => Axios.get(`${API.WEATHER_API_PATH}?appid=${API.WEATHER_API_ACCESS_KEY}&q=${query}&units=${units}`);\n\nconst Weather = (props) => {\n\n    const [longitude, setLongitude] = useState(-122.33);\n    const [latitude, setLatitude]   = useState(47.6);\n    const [city, setCity]           = useState(\"Seattle\");\n    const [country, setCountry]     = useState(\"United State\");\n    const [weather, setWeather]     = useState({});\n    const [wunit, setWunit]         = useState('imperial');\n    const [wtemp, setWtemp]         = useState(0);\n\n    const wunit_change = (e) => {\n        let el = e.target;\n        let id = el.id;\n        \n        if (id !== wunit) {\n            let temp = id === \"metric\" ? (wtemp-32)/1.8: wtemp*1.8+32;\n            setWunit(id);\n            setWtemp(temp);\n        }\n\n        return false;\n    }\n\n    const getWType = (id) => {\n        var type;\n\n        if (id > 800) {\n            type = WType[801]\n        } else if (id === 800) {\n            type = WType[800]\n        } else if (id >= 700 && id < 800) {\n            type = WType[700]\n        } else if (id >= 600 && id < 700) {\n            type = WType[600]\n        } else if (id >= 500 && id < 600) {\n            type = WType[500]\n        } else if (type >= 300 && id < 400) {\n            type = WType[300]\n        } else {\n            type = WType[200]\n        }\n\n        return type;\n    }\n\n    const lookupLoc = () => {\n        ipLookup()\n        .then(success => {\n            \n            let data = !!success ? \n            {\n                ...success,\n                longitude: success.lon,\n                latitude: success.lat\n            } :\n            {\n                latitude: latitude,\n                longitude: longitude,\n                city: city,\n                country: country\n            };\n\n            setLatitude(data.latitude);\n            setLongitude(data.longitude);\n            setCity(data.city);\n            setCountry(data.country);\n            getCurrentWeather(`${city},${country}`, wunit)\n            .then(success => {\n                let {data} = success;\n                //console.log(data)\n                setWtemp(data.main.temp);\n                setWeather({\n                    ...data.main,\n                    name: data.name,\n                    weatherMain: data.weather[0].main,\n                    weatherText: data.weather[0].description,\n                    icon: `${API.WEATHER_API_ICON_PATH}/${data.weather[0].icon}@2x.png`,\n                    id: data.weather[0].id\n                })\n            })\n            .catch(error => {\n                console.error(\"Current Weather Error: \", error);\n            })\n        })\n    }\n\n    useEffect(() => {\n        lookupLoc();\n    }, [])\n\n    return (\n        <Wrapper>\n            <WeatherText>\n                <WIcon type={getWType(300)} text={weather.weatherText}></WIcon>\n            </WeatherText>\n            {props.children}\n            <Wave/>\n            <Card>\n                <CityText>{city}</CityText>\n                <TempSwitcher>\n                    <span id=\"metric\" className={wunit === \"metric\"? \"active\":\"\"} onClick={wunit_change}>°C</span>\n                    <span id=\"imperial\" className={wunit === \"imperial\"? \"active\":\"\"} onClick={wunit_change}>°F</span>\n                </TempSwitcher>\n                <TempText>\n                    {Math.round(wtemp)}\n                    <small className=\"degree\">o</small>\n                </TempText>\n                \n            </Card>\n        </Wrapper>\n    )\n}\n\nexport default Weather;\n\nWeather.defaultProps = {\n    \n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAUA;AAQA;AAOA;AAQA;AAqBA;AA2BA;AAkBA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;;;;A","sourceRoot":""}