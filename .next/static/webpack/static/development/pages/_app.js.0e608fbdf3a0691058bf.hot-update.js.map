{"version":3,"file":"static/webpack/static/development/pages/_app.js.0e608fbdf3a0691058bf.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react';\nimport App, { Container } from 'next/app';\nimport Head from 'next/head';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Transition from '../components/transition';\nimport Header from \"../components/layout/header\";\nimport Footer from \"../components/layout/footer.copy\";\nimport { GlobalStyle } from \"../src/global-styles\";\n\nclass MyApp extends App {\n\n    state = {\n        triggerTransition: true,\n        isNavOpened: true,\n        navPosition: \"fixed\",\n        overflowClassname: \"nav-opened\",\n        menuColor: \"action\",\n        transitionTimeout: 2000,\n        pageTitle: \"Software Engineer\"\n    }\n\n    componentDidMount() {\n        const jssStyles = document.querySelector('#jss-server-side');\n        if (jssStyles) {\n            jssStyles.parentNode.removeChild(jssStyles)\n        }\n\n        let {\n            triggerTransition,\n            overflowClassname\n        } = this.state;\n\n        setTimeout(() => {\n            this.setState({\n                triggerTransition: !triggerTransition\n            }, () => {\n                document.body.classList.remove(overflowClassname)\n            });\n        }, this.state.transitionTimeout)\n    }\n\n    setMenuColor = (color) => {\n        this.setState({\n            menuColor: color\n        })\n    }\n\n    setPageTitle = (pageTitle) => {\n        this.setState({\n            pageTitle: pageTitle\n        })\n    }\n\n    toggleNav = () => {\n        let {\n          isNavOpened,\n          overflowClassname\n        } = this.state;\n\n        (!isNavOpened) ?\n            document.body.classList.add(overflowClassname) :\n            document.body.classList.remove(overflowClassname)\n    \n        this.setState({\n            isNavOpened: !isNavOpened,\n        })\n    }\n\n    render() {\n        let {\n            Component,\n            pageProps\n        } = this.props;\n\n        let {\n            isNavOpened,\n            navPosition,\n            triggerTransition,\n            overflowClassname,\n            menuColor,\n            pageTitle\n        } = this.state;\n\n        return (\n            <Container>\n                <Head>\n                    <title>\n                        Portfolio | {pageTitle}\n                    </title>\n                </Head>\n                <>\n                    <GlobalStyle/>\n                    <CssBaseline/>\n    \n                    <Transition triggerTransition={triggerTransition} overflowClassname={overflowClassname}/>\n                    <Header \n                        toggleNav={this.toggleNav} \n                        isNavOpened={isNavOpened} \n                        navPosition={navPosition}\n                        menuColor={menuColor}\n                    />\n                    <Component \n                        {...pageProps} \n                        setMenuColor={this.setMenuColor}\n                        setPageTitle={this.setPageTitle}\n                    />\n                    <Footer/>\n                </>\n            </Container>\n        )\n    }\n}\n\nexport default MyApp;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AA6BA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AAGA;AACA;AADA;AAGA;AACA;;;;;;AA9CA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAWA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AArGA;AACA;AAuGA;;;;A","sourceRoot":""}